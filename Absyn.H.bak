#ifndef ABSYN_HEADER
#define ABSYN_HEADER

/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef char* String;
typedef char* Ident;


/********************   Forward Declarations    ********************/

struct ListFunction_;
typedef struct ListFunction_ *ListFunction;
struct ListStm_;
typedef struct ListStm_ *ListStm;
struct ListDecl_;
typedef struct ListDecl_ *ListDecl;
struct ListIdent_;
typedef struct ListIdent_ *ListIdent;
struct ListExp_;
typedef struct ListExp_ *ListExp;
struct Program_;
typedef struct Program_ *Program;
struct Function_;
typedef struct Function_ *Function;
struct Decl_;
typedef struct Decl_ *Decl;
struct Stm_;
typedef struct Stm_ *Stm;
struct Exp_;
typedef struct Exp_ *Exp;
struct Type_;
typedef struct Type_ *Type;


/********************   Abstract Syntax Classes    ********************/

struct Program_
{
  enum { is_Prog } kind;
  union
  {
    struct { ListFunction listfunction_; } prog_;
  } u;
};

Program make_Prog(ListFunction p0);

struct Function_
{
  enum { is_Fun } kind;
  union
  {
    struct { Ident ident_; ListDecl listdecl_; ListStm liststm_; Type type_; } fun_;
  } u;
};

Function make_Fun(Type p0, Ident p1, ListDecl p2, ListStm p3);

struct Decl_
{
  enum { is_Dec } kind;
  union
  {
    struct { ListIdent listident_; Type type_; } dec_;
  } u;
};

Decl make_Dec(Type p0, ListIdent p1);

struct ListFunction_
{
  Function function_;
  ListFunction listfunction_;
};

ListFunction make_ListFunction(Function p1, ListFunction p2);
struct ListStm_
{
  Stm stm_;
  ListStm liststm_;
};

ListStm make_ListStm(Stm p1, ListStm p2);
struct ListDecl_
{
  Decl decl_;
  ListDecl listdecl_;
};

ListDecl make_ListDecl(Decl p1, ListDecl p2);
struct ListIdent_
{
  Ident ident_;
  ListIdent listident_;
};

ListIdent make_ListIdent(Ident p1, ListIdent p2);
struct Stm_
{
  enum { is_SDecl, is_SExp, is_SBlock, is_SIf, is_SWhile, is_SReturn } kind;
  union
  {
    struct { Decl decl_; } sdecl_;
    struct { Exp exp_; } sexp_;
    struct { ListStm liststm_; } sblock_;
    struct { Exp exp_; Stm stm_; } sif_;
    struct { Exp exp_; Stm stm_; } swhile_;
    struct { Exp exp_; } sreturn_;
  } u;
};

Stm make_SDecl(Decl p0);
Stm make_SExp(Exp p0);
Stm make_SBlock(ListStm p0);
Stm make_SIf(Exp p0, Stm p1);
Stm make_SWhile(Exp p0, Stm p1);
Stm make_SReturn(Exp p0);

struct Exp_
{
  enum { is_EAss, is_ELt, is_EAdd, is_ESub, is_EMul, is_Call, is_EVar, is_EStr, is_EInt, is_EDouble } kind;
  union
  {
    struct { Exp exp_; Ident ident_; } eass_;
    struct { Exp exp_1, exp_2; } elt_;
    struct { Exp exp_1, exp_2; } eadd_;
    struct { Exp exp_1, exp_2; } esub_;
    struct { Exp exp_1, exp_2; } emul_;
    struct { Ident ident_; ListExp listexp_; } call_;
    struct { Ident ident_; } evar_;
    struct { String string_; } estr_;
    struct { Integer integer_; } eint_;
    struct { Double double_; } edouble_;
  } u;
};

Exp make_EAss(Ident p0, Exp p1);
Exp make_ELt(Exp p0, Exp p1);
Exp make_EAdd(Exp p0, Exp p1);
Exp make_ESub(Exp p0, Exp p1);
Exp make_EMul(Exp p0, Exp p1);
Exp make_Call(Ident p0, ListExp p1);
Exp make_EVar(Ident p0);
Exp make_EStr(String p0);
Exp make_EInt(Integer p0);
Exp make_EDouble(Double p0);

struct ListExp_
{
  Exp exp_;
  ListExp listexp_;
};

ListExp make_ListExp(Exp p1, ListExp p2);
struct Type_
{
  enum { is_TInt, is_TDouble } kind;
  union
  {
  } u;
};

Type make_TInt();
Type make_TDouble();



#endif
